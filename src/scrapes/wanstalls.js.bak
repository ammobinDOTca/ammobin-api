https://www.wanstallsonline.com/adjnav/ajax/category/id/102/?order=name&cat=103&p=1&no_cache=true&home=0


const axios = require('axios');
const cheerio = require('cheerio');
const helpers = require('../helpers');
const throat = require('throat');

function getStuff(cPath, page = 1) {
  return axios.get(``)
    .then(r => {
      let $ = cheerio.load(r.data)
      const items = [];
      $('.productListing-odd , .productListing-even').each((index, row) => {
        const result = {};
        const tha = $(row);

        //wish there was a better way to do this, but the html is not making it easy
        let soldOut = false;
        tha.find('.productListing-data img').each((i, subrow) => {
          soldOut = soldOut || $(subrow).prop('alt') === 'Sold Out';
        });

        if (soldOut) {
          return;
        }

        result.link = tha.find('.listing a').prop('href');
        const src = tha.find('.listingProductImage').prop('src');
        result.img = src ? ('https://www.theammosource.com/' + src) : null;
        result.name = tha.find('.itemTitle').text();

        tha.find('.productListing-data').each((index, subrow) => {
          const ff = $(subrow)
          if (!ff.contents().text()) {
            return;
          }
          result.price = parseFloat(ff.contents().text().replace('$', ''));
        })
        result.price = result.price || -1;

        result.vendor = 'Ammo Source';
        result.province = 'ON'
        items.push(result);
      });

      const itemCounts = $('#productsListingTopNumber').text().split(' ').map(s => parseInt(s, 10)).filter(n => !isNaN(n));

      if (itemCounts[1] < itemCounts[2]) {
        $ = null; // dont hold onto page
        console.log(`loaded ammo source ${itemCounts[0]} - ${itemCounts[1]} out of ${itemCounts[2]}`)
        return getStuff(cPath, page + 1)
          .then(res => items.concat(res))
      } else {
        return items;
      }
    });
}

const throttle = throat(1);

module.exports = function (type) {


  switch (type) {
    case 'rimfire':
      return Promise.all([

      ]
        .map(t => throttle(() => getStuff(t, 1)))
      )
        .then(helpers.combineResults)
        .then(helpers.classifyRimfire);

    case 'shotgun':
      return Promise.all([

      ]
        .map(t => throttle(() => getStuff(t, 1)))
      )
        .then(helpers.combineResults)
        .then(helpers.classifyShotgun);

    case 'centerfire':

      return Promise.all([

      ]
        .map(t => throttle(() => getStuff(t, 1)))
      )
        .then(helpers.combineResults)
        .then(helpers.classifyCenterfire);
    default:
      return Promise.reject(new Error('unknown type: ' + type));
  }
}
